import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–∫",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .block-container {
        padding-top: 2rem;
    }
    .stMetricLabel {
        font-size: 1.1rem !important;
        color: #666 !important;
    }
    .stMetricValue {
        font-size: 1.4rem !important;
        color: #2c2c2c !important;
    }
    .plotly-chart {
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

st.title("üê± –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–∫")
st.markdown("""
**–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç—Ä–µ—Ö –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫:** –ê–Ω–≥–æ—Ä–∞, –†—ç–≥–¥–æ–ª–ª, –ú–µ–π–Ω-–∫—É–Ω  
*–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [It's Raining Cats Dataset](https://www.kaggle.com/datasets/joannanplkrk/its-raining-cats)*
""")

@st.cache_data
def –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ():
    try:
        df = pd.read_csv("data/cat_breeds_clean.csv", sep=";")
        
        df["–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω"] = df["Neutered_or_spayed"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None
        })
        
        df["–†–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É"] = df["Allowed_outdoor"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None
        })
        
        df["–ü–æ–ª"] = df["Gender"].map({'male': 0, 'female': 1})
        
        –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ_—Å—Ç–æ–ª–±—Ü—ã = ["–ü–æ—Ä–æ–¥–∞", "–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö", "–í–µ—Å", "–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã", 
                              "–í—Ä–µ–º—è_—Å–Ω–∞_—á–∞—Å—ã", "–î–ª–∏–Ω–∞_—Ç–µ–ª–∞", "–ü–æ–ª", "–°—Ç—Ä–∞–Ω–∞"]
        –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ_—Å—Ç–æ–ª–±—Ü—ã = [col for col in –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ_—Å—Ç–æ–ª–±—Ü—ã if col not in df.columns]
        if –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ_—Å—Ç–æ–ª–±—Ü—ã:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ_—Å—Ç–æ–ª–±—Ü—ã}")
            st.stop()
        
        df = df.rename(columns={
            "Breed": "–ü–æ—Ä–æ–¥–∞",
            "Age_in_years": "–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö",
            "Weight": "–í–µ—Å",
            "Owner_play_time_minutes": "–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã",
            "Sleep_time_hours": "–í—Ä–µ–º—è_—Å–Ω–∞_—á–∞—Å—ã",
            "Body_length": "–î–ª–∏–Ω–∞_—Ç–µ–ª–∞",
            "Gender": "–ü–æ–ª",
            "Country": "–°—Ç—Ä–∞–Ω–∞",
            "Neutered_or_spayed": "–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω",
            "Allowed_outdoor": "–†–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É",
            "Fur_colour_dominant": "–¶–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏_–æ—Å–Ω–æ–≤–Ω–æ–π",
            "Fur_pattern": "–£–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏",
            "Eye_colour": "–¶–≤–µ—Ç_–≥–ª–∞–∑",
            "Preferred_food": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞",
            "Age_in_months": "–í–æ–∑—Ä–∞—Å—Ç_–≤_–º–µ—Å—è—Ü–∞—Ö"
        })
        
        return df
    except FileNotFoundError:
        st.error("–§–∞–π–ª data/cat_breeds_clean.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()

df = –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ()

with st.sidebar:
    with st.expander("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        —Ñ–∏–ª—å—Ç—Ä_–ø–æ—Ä–æ–¥—ã = st.selectbox("–ü–æ—Ä–æ–¥–∞", ["–í—Å–µ"] + df["–ü–æ—Ä–æ–¥–∞"].unique().tolist())
        —Ñ–∏–ª—å—Ç—Ä_–ø–æ–ª–∞ = st.selectbox("–ü–æ–ª", ["–í—Å–µ"] + df["–ü–æ–ª"].unique().tolist())
        —Ñ–∏–ª—å—Ç—Ä_–≤–æ–∑—Ä–∞—Å—Ç–∞ = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã)", 
                                   min_value=0, 
                                   max_value=int(df["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö"].max()), 
                                   value=(0, int(df["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö"].max())))
        —Ñ–∏–ª—å—Ç—Ä_—Å—Ç—Ä–∞–Ω—ã = st.selectbox("–°—Ç—Ä–∞–Ω–∞", ["–í—Å–µ"] + df["–°—Ç—Ä–∞–Ω–∞"].unique().tolist())

def –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å_–¥–∞–Ω–Ω—ã–µ(df):
    –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = df.copy()
    if —Ñ–∏–ª—å—Ç—Ä_–ø–æ—Ä–æ–¥—ã != "–í—Å–µ":
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ["–ü–æ—Ä–æ–¥–∞"] == —Ñ–∏–ª—å—Ç—Ä_–ø–æ—Ä–æ–¥—ã]
    if —Ñ–∏–ª—å—Ç—Ä_–ø–æ–ª–∞ != "–í—Å–µ":
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ["–ü–æ–ª"] == —Ñ–∏–ª—å—Ç—Ä_–ø–æ–ª–∞]
    –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ[(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö"] >= —Ñ–∏–ª—å—Ç—Ä_–≤–æ–∑—Ä–∞—Å—Ç–∞[0]) & 
                                                    (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö"] <= —Ñ–∏–ª—å—Ç—Ä_–≤–æ–∑—Ä–∞—Å—Ç–∞[1])]
    if —Ñ–∏–ª—å—Ç—Ä_—Å—Ç—Ä–∞–Ω—ã != "–í—Å–µ":
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ["–°—Ç—Ä–∞–Ω–∞"] == —Ñ–∏–ª—å—Ç—Ä_—Å—Ç—Ä–∞–Ω—ã]
    return –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ

–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å_–¥–∞–Ω–Ω—ã–µ(df)

@st.cache_resource
def –æ–±—É—á–∏—Ç—å_–º–æ–¥–µ–ª—å(df):
    df_ml = df.copy()
    df_ml['–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω'] = df_ml['–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω'].astype(int)
    df_ml['–†–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É'] = df_ml['–†–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É'].astype(int)

    X = df_ml.drop(['–ü–æ—Ä–æ–¥–∞', '–í–æ–∑—Ä–∞—Å—Ç_–≤_–º–µ—Å—è—Ü–∞—Ö', '–°—Ç—Ä–∞–Ω–∞'], axis=1)
    y = df_ml['–ü–æ—Ä–æ–¥–∞']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ_—Å—Ç–æ–ª–±—Ü—ã = ['–¶–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏_–æ—Å–Ω–æ–≤–Ω–æ–π', '–£–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏', '–¶–≤–µ—Ç_–≥–ª–∞–∑', '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞']

    –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(), –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ_—Å—Ç–æ–ª–±—Ü—ã)
        ],
        remainder='passthrough'
    )

    –∫–æ–Ω–≤–µ–π–µ—Ä = Pipeline(steps=[
        ('–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä),
        ('–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä', RandomForestClassifier(random_state=42, class_weight='balanced'))
    ])

    –∫–æ–Ω–≤–µ–π–µ—Ä.fit(X_train, y_train)

    y_pred = –∫–æ–Ω–≤–µ–π–µ—Ä.predict(X_test)
    –æ—Ç—á–µ—Ç_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ = classification_report(y_test, y_pred, output_dict=True)
    –º–∞—Ç—Ä–∏—Ü–∞_–æ—à–∏–±–æ–∫ = confusion_matrix(y_test, y_pred)
    —Ç–æ—á–Ω–æ—Å—Ç—å = accuracy_score(y_test, y_pred)
    
    return –∫–æ–Ω–≤–µ–π–µ—Ä, –æ—Ç—á–µ—Ç_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –º–∞—Ç—Ä–∏—Ü–∞_–æ—à–∏–±–æ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å

–∫–æ–Ω–≤–µ–π–µ—Ä, –æ—Ç—á–µ—Ç_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –º–∞—Ç—Ä–∏—Ü–∞_–æ—à–∏–±–æ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å = –æ–±—É—á–∏—Ç—å_–º–æ–¥–µ–ª—å(df)

st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
cols = st.columns(4)
–º–µ—Ç—Ä–∏–∫–∏ = {
    "–í—Å–µ–≥–æ –∫–æ—à–µ–∫": len(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ),
    "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç": f"{–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ['–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö'].mean():.1f} –ª–µ—Ç",
    "–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å": f"{–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ['–í–µ—Å'].mean():.1f} –∫–≥",
    "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–∞—Å—ã/–¥–µ–Ω—å)": f"{–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ['–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã'].mean() / 60:.1f} —á–∞—Å–æ–≤"
}

for col, (–º–µ—Ç–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ) in zip(cols, –º–µ—Ç—Ä–∏–∫–∏.items()):
    with col:
        st.markdown(f"<div style='padding: 20px; background-color: #f8f9fa; border-radius: 10px;'>"
                    f"<h3 style='margin:0; color: #2c2c2c;'>{–∑–Ω–∞—á–µ–Ω–∏–µ}</h3>"
                    f"<p style='margin:0; color: #666;'>{–º–µ—Ç–∫–∞}</p></div>", 
                    unsafe_allow_html=True)

–≤–∫–ª–∞–¥–∫–∞1, –≤–∫–ª–∞–¥–∫–∞2, –≤–∫–ª–∞–¥–∫–∞3 = st.tabs(["üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏—è", "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"])

with –≤–∫–ª–∞–¥–∫–∞1:
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.pie(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, names="–ü–æ—Ä–æ–¥–∞", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    hole=0.4, color="–ü–æ—Ä–æ–¥–∞", 
                    color_discrete_map={
                        'Angora': '#FFA07A',
                        'Ragdoll': '#87CEEB',
                        'Maine Coon': '#778899'
                    })
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.histogram(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, x="–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö", nbins=20, 
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
                         color="–ü–æ—Ä–æ–¥–∞", barmode="overlay",
                         opacity=0.7)
        st.plotly_chart(fig, use_container_width=True)

with –≤–∫–ª–∞–¥–∫–∞2:
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.box(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, x="–ü–æ—Ä–æ–¥–∞", y="–í–µ—Å", 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    color="–ü–æ—Ä–æ–¥–∞", points="all")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã = ["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö", "–í–µ—Å", "–î–ª–∏–Ω–∞_—Ç–µ–ª–∞", 
                           "–í—Ä–µ–º—è_—Å–Ω–∞_—á–∞—Å—ã", "–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã"]
        –æ—Å—å_x = st.selectbox("–û—Å—å X", —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã, key="–æ—Å—å_x")
        –æ—Å—å_y = st.selectbox("–û—Å—å Y", —á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã, index=1, key="–æ—Å—å_y")
        
        fig = px.scatter(
            –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, x=–æ—Å—å_x, y=–æ—Å—å_y, 
            color="–ü–æ—Ä–æ–¥–∞", size="–í–µ—Å",
            hover_data=["–ü–æ–ª", "–°—Ç—Ä–∞–Ω–∞"],
            title=f"{–æ—Å—å_x} –ø—Ä–æ—Ç–∏–≤ {–æ—Å—å_y}",
            trendline="lowess"
        )
        st.plotly_chart(fig, use_container_width=True)

with –≤–∫–ª–∞–¥–∫–∞3:
    st.subheader("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã")
    
    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {—Ç–æ—á–Ω–æ—Å—Ç—å:.2f}")
    
    st.write("**–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:**")
    st.write(pd.DataFrame(–æ—Ç—á–µ—Ç_–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏).transpose())
    
    st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π –∫–æ—à–∫–∏")
    with st.form("—Ñ–æ—Ä–º–∞_–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        –≤–æ–∑—Ä–∞—Å—Ç = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã)", 0.0, float(df["–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö"].max()), 2.0)
        –≤–µ—Å = st.slider("–í–µ—Å (–∫–≥)", 0.0, float(df["–í–µ—Å"].max()), 5.0)
        –¥–ª–∏–Ω–∞_—Ç–µ–ª–∞ = st.slider("–î–ª–∏–Ω–∞ —Ç–µ–ª–∞ (—Å–º)", 0.0, float(df["–î–ª–∏–Ω–∞_—Ç–µ–ª–∞"].max()), 40.0)
        –≤—Ä–µ–º—è_—Å–Ω–∞ = st.slider("–í—Ä–µ–º—è —Å–Ω–∞ (—á–∞—Å—ã)", 0, int(df["–í—Ä–µ–º—è_—Å–Ω–∞_—á–∞—Å—ã"].max()), 16)
        –≤—Ä–µ–º—è_–∏–≥—Ä—ã = st.slider("–í—Ä–µ–º—è –∏–≥—Ä—ã —Å —Ö–æ–∑—è–∏–Ω–æ–º (–º–∏–Ω—É—Ç—ã)", 0, int(df["–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã"].max()), 20)
        –ø–æ–ª = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
        –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω = st.selectbox("–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω", [True, False])
        —Ä–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É = st.selectbox("–†–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞ —É–ª–∏—Ü—É", [True, False])
        —Ü–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏ = st.selectbox("–¶–≤–µ—Ç —à–µ—Ä—Å—Ç–∏", df["–¶–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏_–æ—Å–Ω–æ–≤–Ω–æ–π"].unique())
        —É–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏ = st.selectbox("–£–∑–æ—Ä —à–µ—Ä—Å—Ç–∏", df["–£–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏"].unique())
        —Ü–≤–µ—Ç_–≥–ª–∞–∑ = st.selectbox("–¶–≤–µ—Ç –≥–ª–∞–∑", df["–¶–≤–µ—Ç_–≥–ª–∞–∑"].unique())
        –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞ = st.selectbox("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –µ–¥–∞", df["–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞"].unique())
        
        –∫–Ω–æ–ø–∫–∞_–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")
        
        if –∫–Ω–æ–ø–∫–∞_–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å:
            –≤—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = pd.DataFrame({
                '–í–æ–∑—Ä–∞—Å—Ç_–≤_–≥–æ–¥–∞—Ö': [–≤–æ–∑—Ä–∞—Å—Ç],
                '–í–µ—Å': [–≤–µ—Å],
                '–î–ª–∏–Ω–∞_—Ç–µ–ª–∞': [–¥–ª–∏–Ω–∞_—Ç–µ–ª–∞],
                '–í—Ä–µ–º—è_—Å–Ω–∞_—á–∞—Å—ã': [–≤—Ä–µ–º—è_—Å–Ω–∞],
                '–í—Ä–µ–º—è_–∏–≥—Ä—ã_—Å_—Ö–æ–∑—è–∏–Ω–æ–º_–º–∏–Ω—É—Ç—ã': [–≤—Ä–µ–º—è_–∏–≥—Ä—ã],
                '–ü–æ–ª': [1 if –ø–æ–ª == '–ñ–µ–Ω—Å–∫–∏–π' else 0],
                '–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω': [int(–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)],
                '–†–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É': [int(—Ä–∞–∑—Ä–µ—à–µ–Ω–æ_–Ω–∞_—É–ª–∏—Ü—É)],
                '–¶–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏_–æ—Å–Ω–æ–≤–Ω–æ–π': [—Ü–≤–µ—Ç_—à–µ—Ä—Å—Ç–∏],
                '–£–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏': [—É–∑–æ—Ä_—à–µ—Ä—Å—Ç–∏],
                '–¶–≤–µ—Ç_–≥–ª–∞–∑': [—Ü–≤–µ—Ç_–≥–ª–∞–∑],
                '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞': [–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–µ–¥–∞]
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            –æ–±—É—á–∞—é—â–∏–µ_—Å—Ç–æ–ª–±—Ü—ã = –∫–æ–Ω–≤–µ–π–µ—Ä.named_steps['–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä'].transformers_[0][2] + \
                               [col for col in X.columns if col not in –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ_—Å—Ç–æ–ª–±—Ü—ã]
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for col in –æ–±—É—á–∞—é—â–∏–µ_—Å—Ç–æ–ª–±—Ü—ã:
                if col not in –≤—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ.columns:
                    –≤—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ[col] = 0

            –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ = –∫–æ–Ω–≤–µ–π–µ—Ä.predict(–≤—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ)[0]
            st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞: **{–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ}**")

with st.sidebar:
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"):
        st.markdown("""
        **–ê–≤—Ç–æ—Ä:** [ast]  
        **–í–µ—Ä—Å–∏—è:** 1.0  
        **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** 2023-12-20  
                    
        –≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ö –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫:
        - –ê–Ω–≥–æ—Ä–∞
        - –†—ç–≥–¥–æ–ª–ª
        - –ú–µ–π–Ω-–∫—É–Ω
                    
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.
        """)