import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–∫",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
st.markdown("""
<style>
    .block-container {
        padding-top: 2rem;
    }
    .stMetricLabel {
        font-size: 1.1rem !important;
        color: #666 !important;
    }
    .stMetricValue {
        font-size: 1.4rem !important;
        color: #2c2c2c !important;
    }
    .plotly-chart {
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üê± –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ—à–µ–∫")
st.markdown("""
**–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç—Ä–µ—Ö –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫:** –ê–Ω–≥–æ—Ä–∞, –†—ç–≥–¥–æ–ª–ª, –ú–µ–π–Ω-–∫—É–Ω  
*–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [It's Raining Cats Dataset](https://www.kaggle.com/datasets/joannanplkrk/its-raining-cats)*
""")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        df = pd.read_csv("data/cat_breeds_clean_russian.csv", sep=";")
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–ª–µ–≤—ã—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        df["–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω"] = df["–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None
        })
        
        df["–†–∞–∑—Ä–µ—à–µ–Ω–æ_–ù–∞_–£–ª–∏—Ü—É"] = df["–†–∞–∑—Ä–µ—à–µ–Ω–æ_–ù–∞_–£–ª–∏—Ü—É"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None
        })
        
        df["–ü–æ–ª"] = df["–ü–æ–ª"].map({'male': 0, 'female': 1})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ["–ü–æ—Ä–æ–¥–∞", "–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã", "–í–µ—Å_–∫–≥", "–í—Ä–µ–º—è_–ò–≥—Ä—ã_—Å_–•–æ–∑—è–∏–Ω–æ–º_–ú–∏–Ω—É—Ç—ã", 
                           "–í—Ä–µ–º—è_–°–Ω–∞_–ß–∞—Å—ã", "–î–ª–∏–Ω–∞_–¢–µ–ª–∞_—Å–º", "–ü–æ–ª", "–°—Ç—Ä–∞–Ω–∞"]
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {missing_columns}")
            st.stop()
        
        return df
    except FileNotFoundError:
        st.error("–§–∞–π–ª data/cat_breeds_clean_russian.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    with st.expander("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        breed_filter = st.selectbox("–ü–æ—Ä–æ–¥–∞", ["–í—Å–µ"] + df["–ü–æ—Ä–æ–¥–∞"].unique().tolist())
        gender_filter = st.selectbox("–ü–æ–ª", ["–í—Å–µ"] + df["–ü–æ–ª"].unique().tolist())
        age_filter = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã)", 
                             min_value=0, 
                             max_value=int(df["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã"].max()), 
                             value=(0, int(df["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã"].max())))
        country_filter = st.selectbox("–°—Ç—Ä–∞–Ω–∞", ["–í—Å–µ"] + df["–°—Ç—Ä–∞–Ω–∞"].unique().tolist())

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def filter_data(df):
    filtered_df = df.copy()
    if breed_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["–ü–æ—Ä–æ–¥–∞"] == breed_filter]
    if gender_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["–ü–æ–ª"] == gender_filter]
    filtered_df = filtered_df[(filtered_df["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã"] >= age_filter[0]) & 
                            (filtered_df["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã"] <= age_filter[1])]
    if country_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["–°—Ç—Ä–∞–Ω–∞"] == country_filter]
    return filtered_df

filtered_df = filter_data(df)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
@st.cache_resource
def train_model(df):
    df_ml = df.copy()
    df_ml['–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω'] = df_ml['–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω'].astype(int)
    df_ml['–†–∞–∑—Ä–µ—à–µ–Ω–æ_–ù–∞_–£–ª–∏—Ü—É'] = df_ml['–†–∞–∑—Ä–µ—à–µ–Ω–æ_–ù–∞_–£–ª–∏—Ü—É'].astype(int)

    X = df_ml.drop(['–ü–æ—Ä–æ–¥–∞', '–í–æ–∑—Ä–∞—Å—Ç_–ú–µ—Å—è—Ü—ã', '–°—Ç—Ä–∞–Ω–∞'], axis=1)
    y = df_ml['–ü–æ—Ä–æ–¥–∞']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    categorical_cols = ['–û—Å–Ω–æ–≤–Ω–æ–π_–¶–≤–µ—Ç_–®–µ—Ä—Å—Ç–∏', '–£–∑–æ—Ä_–®–µ—Ä—Å—Ç–∏', '–¶–≤–µ—Ç_–ì–ª–∞–∑', '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–ï–¥–∞']

    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(), categorical_cols)
        ],
        remainder='passthrough'
    )

    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', RandomForestClassifier(random_state=42, class_weight='balanced'))
    ])

    pipeline.fit(X_train, y_train)

    y_pred = pipeline.predict(X_test)
    class_report = classification_report(y_test, y_pred, output_dict=True)
    conf_matrix = confusion_matrix(y_test, y_pred)
    accuracy = accuracy_score(y_test, y_pred)
    
    return pipeline, class_report, conf_matrix, accuracy

pipeline, class_report, conf_matrix, accuracy = train_model(df)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
cols = st.columns(4)
metrics = {
    "–í—Å–µ–≥–æ –∫–æ—à–µ–∫": len(filtered_df),
    "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç": f"{filtered_df['–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã'].mean():.1f} –ª–µ—Ç",
    "–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å": f"{filtered_df['–í–µ—Å_–∫–≥'].mean():.1f} –∫–≥",
    "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–∞—Å—ã/–¥–µ–Ω—å)": f"{filtered_df['–í—Ä–µ–º—è_–ò–≥—Ä—ã_—Å_–•–æ–∑—è–∏–Ω–æ–º_–ú–∏–Ω—É—Ç—ã'].mean() / 60:.1f} —á–∞—Å–æ–≤"
}

for col, (label, value) in zip(cols, metrics.items()):
    with col:
        st.markdown(f"<div style='padding: 20px; background-color: #f8f9fa; border-radius: 10px;'>"
                    f"<h3 style='margin:0; color: #2c2c2c;'>{value}</h3>"
                    f"<p style='margin:0; color: #666;'>{label}</p></div>", 
                    unsafe_allow_html=True)

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
tab1, tab2, tab3, tab4 = st.tabs(["üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏—è", "üîç –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"])

with tab1:
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.pie(filtered_df, names="–ü–æ—Ä–æ–¥–∞", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    hole=0.4, color="–ü–æ—Ä–æ–¥–∞", 
                    color_discrete_map={
                        'Angora': '#FFA07A',
                        'Ragdoll': '#87CEEB',
                        'Maine Coon': '#778899'
                    })
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.histogram(filtered_df, x="–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã", nbins=20, 
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
                         color="–ü–æ—Ä–æ–¥–∞", barmode="overlay",
                         opacity=0.7)
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.box(filtered_df, x="–ü–æ—Ä–æ–¥–∞", y="–í–µ—Å_–∫–≥", 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    color="–ü–æ—Ä–æ–¥–∞", points="all")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        numerical_cols = ["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã", "–í–µ—Å_–∫–≥", "–î–ª–∏–Ω–∞_–¢–µ–ª–∞_—Å–º", 
                        "–í—Ä–µ–º—è_–°–Ω–∞_–ß–∞—Å—ã", "–í—Ä–µ–º—è_–ò–≥—Ä—ã_—Å_–•–æ–∑—è–∏–Ω–æ–º_–ú–∏–Ω—É—Ç—ã"]
        x_axis = st.selectbox("–û—Å—å X", numerical_cols, key="x_axis")
        y_axis = st.selectbox("–û—Å—å Y", numerical_cols, index=1, key="y_axis")
        
        fig = px.scatter(
            filtered_df, x=x_axis, y=y_axis, 
            color="–ü–æ—Ä–æ–¥–∞", size="–í–µ—Å_–∫–≥",
            hover_data=["–ü–æ–ª", "–°—Ç—Ä–∞–Ω–∞"],
            title=f"{x_axis} vs {y_axis}",
            trendline="lowess"
        )
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    corr_matrix = filtered_df[numerical_cols].corr()
    fig = go.Figure(data=go.Heatmap(
        z=corr_matrix,
        x=corr_matrix.columns,
        y=corr_matrix.columns,
        colorscale='Blues',
        hoverongaps=False,
        text=np.round(corr_matrix.values, 2),
        texttemplate="%{text}"
    ))
    fig.update_layout(title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", height=600)
    st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.subheader("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã")
    
    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {accuracy:.2f}")
    
    st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:**")
    st.write(conf_matrix)
    
    st.write("**–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:**")
    st.write(pd.DataFrame(class_report).transpose())
    
    st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π –∫–æ—à–∫–∏")
    with st.form("prediction_form"):
        age = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã)", 0.0, float(df["–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã"].max()), 2.0)
        weight = st.slider("–í–µ—Å (–∫–≥)", 0.0, float(df["–í–µ—Å_–∫–≥"].max()), 5.0)
        body_length = st.slider("–î–ª–∏–Ω–∞ —Ç–µ–ª–∞ (—Å–º)", 0.0, float(df["–î–ª–∏–Ω–∞_–¢–µ–ª–∞_—Å–º"].max()), 40.0)
        sleep_time = st.slider("–í—Ä–µ–º—è —Å–Ω–∞ (—á–∞—Å—ã)", 0, int(df["–í—Ä–µ–º—è_–°–Ω–∞_–ß–∞—Å—ã"].max()), 16)
        play_time = st.slider("–í—Ä–µ–º—è –∏–≥—Ä—ã —Å —Ö–æ–∑—è–∏–Ω–æ–º (–º–∏–Ω—É—Ç—ã)", 0, int(df["–í—Ä–µ–º—è_–ò–≥—Ä—ã_—Å_–•–æ–∑—è–∏–Ω–æ–º_–ú–∏–Ω—É—Ç—ã"].max()), 20)
        gender = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
        neutered = st.selectbox("–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω", [True, False])
        outdoor = st.selectbox("–†–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞ —É–ª–∏—Ü—É", [True, False])
        fur_colour = st.selectbox("–¶–≤–µ—Ç —à–µ—Ä—Å—Ç–∏", df["–û—Å–Ω–æ–≤–Ω–æ–π_–¶–≤–µ—Ç_–®–µ—Ä—Å—Ç–∏"].unique())
        fur_pattern = st.selectbox("–£–∑–æ—Ä —à–µ—Ä—Å—Ç–∏", df["–£–∑–æ—Ä_–®–µ—Ä—Å—Ç–∏"].unique())
        eye_colour = st.selectbox("–¶–≤–µ—Ç –≥–ª–∞–∑", df["–¶–≤–µ—Ç_–ì–ª–∞–∑"].unique())
        preferred_food = st.selectbox("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –µ–¥–∞", df["–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–ï–¥–∞"].unique())
        
        submit_button = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")
        
        if submit_button:
            input_data = pd.DataFrame({
                '–í–æ–∑—Ä–∞—Å—Ç_–ì–æ–¥—ã': [age],
                '–í–µ—Å_–∫–≥': [weight],
                '–î–ª–∏–Ω–∞_–¢–µ–ª–∞_—Å–º': [body_length],
                '–í—Ä–µ–º—è_–°–Ω–∞_–ß–∞—Å—ã': [sleep_time],
                '–í—Ä–µ–º—è_–ò–≥—Ä—ã_—Å_–•–æ–∑—è–∏–Ω–æ–º_–ú–∏–Ω—É—Ç—ã': [play_time],
                '–ü–æ–ª': [1 if gender == '–ñ–µ–Ω—Å–∫–∏–π' else 0],
                '–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω_–∏–ª–∏_–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω': [int(neutered)],
                '–†–∞–∑—Ä–µ—à–µ–Ω–æ_–ù–∞_–£–ª–∏—Ü—É': [int(outdoor)],
                '–û—Å–Ω–æ–≤–Ω–æ–π_–¶–≤–µ—Ç_–®–µ—Ä—Å—Ç–∏': [fur_colour],
                '–£–∑–æ—Ä_–®–µ—Ä—Å—Ç–∏': [fur_pattern],
                '–¶–≤–µ—Ç_–ì–ª–∞–∑': [eye_colour],
                '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è_–ï–¥–∞': [preferred_food]
            })
            
            prediction = pipeline.predict(input_data)[0]
            st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞: **{prediction}**")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"):
        st.markdown("""
        **–ê–≤—Ç–æ—Ä:** [ast]  
        **–í–µ—Ä—Å–∏—è:** 1.0  
        **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** 2023-12-20  
                    
        –≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ö –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫:
        - –ê–Ω–≥–æ—Ä–∞
        - –†—ç–≥–¥–æ–ª–ª
        - –ú–µ–π–Ω-–∫—É–Ω
                    
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.
        """)