import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç numpy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Cat Analytics Dashboard",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .block-container {
        padding-top: 2rem;
    }
    .stMetricLabel {
        font-size: 1.1rem !important;
        color: #666 !important;
    }
    .stMetricValue {
        font-size: 1.4rem !important;
        color: #2c2c2c !important;
    }
    .plotly-chart {
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üê± Advanced Cat Analytics Dashboard")
st.markdown("""
**–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—à–µ–∫ —Ç—Ä—ë—Ö –ø–æ—Ä–æ–¥:** –ê–Ω–≥–æ—Ä–∞, –†—ç–≥–¥–æ–ª–ª, –ú–µ–π–Ω-–∫—É–Ω  
*–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [It's Raining Cats Dataset](https://www.kaggle.com/datasets/joannanplkrk/its-raining-cats)*
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("data/cat_breeds_clean.csv", sep=";")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        df["Neutered_or_spayed"] = df["Neutered_or_spayed"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        })
        
        df["Allowed_outdoor"] = df["Allowed_outdoor"].astype(str).str.upper().map({
            "TRUE": True,
            "FALSE": False,
            "NAN": None
        })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ["Breed", "Age_in_years", "Weight", "Owner_play_time_minutes", 
                           "Sleep_time_hours", "Body_length", "Gender", "Country"]
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {missing_columns}")
            st.stop()
        
        return df
    except FileNotFoundError:
        st.error("–§–∞–π–ª data/cat_breeds_clean.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()

df = load_data()

# –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    with st.expander("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        breed_filter = st.selectbox("–ü–æ—Ä–æ–¥–∞", ["–í—Å–µ"] + df["Breed"].unique().tolist())
        gender_filter = st.selectbox("–ü–æ–ª", ["–í—Å–µ"] + df["Gender"].unique().tolist())
        age_filter = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–≥–æ–¥—ã)", 
                             min_value=0, 
                             max_value=int(df["Age_in_years"].max()), 
                             value=(0, int(df["Age_in_years"].max())))
        country_filter = st.selectbox("–°—Ç—Ä–∞–Ω–∞", ["–í—Å–µ"] + df["Country"].unique().tolist())

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def filter_data(df):
    filtered_df = df.copy()
    if breed_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["Breed"] == breed_filter]
    if gender_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["Gender"] == gender_filter]
    filtered_df = filtered_df[(filtered_df["Age_in_years"] >= age_filter[0]) & 
                            (filtered_df["Age_in_years"] <= age_filter[1])]
    if country_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["Country"] == country_filter]
    return filtered_df

filtered_df = filter_data(df)

# –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
cols = st.columns(4)
metrics = {
    "–í—Å–µ–≥–æ –∫–æ—à–µ–∫": len(filtered_df),
    "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç": f"{filtered_df['Age_in_years'].mean():.1f} –ª–µ—Ç",
    "–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å": f"{filtered_df['Weight'].mean():.1f} –∫–≥",
    "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á/–¥–µ–Ω—å)": f"{filtered_df['Owner_play_time_minutes'].mean() / 60:.1f} —á–∞—Å–æ–≤"  # –ü–µ—Ä–µ–≤–æ–¥ –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã
}

for col, (label, value) in zip(cols, metrics.items()):
    with col:
        st.markdown(f"<div style='padding: 20px; background-color: #f8f9fa; border-radius: 10px;'>"
                    f"<h3 style='margin:0; color: #2c2c2c;'>{value}</h3>"
                    f"<p style='margin:0; color: #666;'>{label}</p></div>", 
                    unsafe_allow_html=True)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
tab1, tab2, tab3 = st.tabs(["üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "üîç –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"])

with tab1:
    col1, col2 = st.columns(2)
    
    with col1:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–¥–∞–º
        fig = px.pie(filtered_df, names="Breed", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    hole=0.4, color="Breed", 
                    color_discrete_map={
                        'Angora': '#FFA07A',
                        'Ragdoll': '#87CEEB',
                        'Maine Coon': '#778899'
                    })
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        fig = px.histogram(filtered_df, x="Age_in_years", nbins=20, 
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞",
                         color="Breed", barmode="overlay",
                         opacity=0.7)
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    col1, col2 = st.columns(2)
    
    with col1:
        # Boxplot –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        fig = px.box(filtered_df, x="Breed", y="Weight", 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                    color="Breed", points="all")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Scatter plot
        numerical_cols = ["Age_in_years", "Weight", "Body_length", 
                        "Sleep_time_hours", "Owner_play_time_minutes"]
        x_axis = st.selectbox("–û—Å—å X", numerical_cols, key="x_axis")
        y_axis = st.selectbox("–û—Å—å Y", numerical_cols, index=1, key="y_axis")
        
        fig = px.scatter(
            filtered_df, x=x_axis, y=y_axis, 
            color="Breed", size="Weight",
            hover_data=["Gender", "Country"],
            title=f"{x_axis} vs {y_axis}",
            trendline="lowess"
        )
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    corr_matrix = filtered_df[numerical_cols].corr()
    fig = go.Figure(data=go.Heatmap(
        z=corr_matrix,
        x=corr_matrix.columns,
        y=corr_matrix.columns,
        colorscale='Blues',
        hoverongaps=False,
        text=np.round(corr_matrix.values, 2),
        texttemplate="%{text}"
    ))
    fig.update_layout(title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", height=600)
    st.plotly_chart(fig, use_container_width=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"):
        st.markdown("""
        **–ê–≤—Ç–æ—Ä:** [ast]  
        **–í–µ—Ä—Å–∏—è:** 1.0  
        **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** 2023-12-20  
                    
        –≠—Ç–æ—Ç –¥–∞—à–±–æ—Ä–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö —Ç—Ä—ë—Ö –ø–æ—Ä–æ–¥:
        - –ê–Ω–≥–æ—Ä–∞
        - –†—ç–≥–¥–æ–ª–ª
        - –ú–µ–π–Ω-–∫—É–Ω
                    
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.
        """)